import os
import telebot
import time
from user import Users, User
from telebot import types
from bot_logging import logger

token = os.getenv("BOT_TOKEN")

bot = telebot.TeleBot(token)


@bot.message_handler(commands=['start'])
def send_welcome(message):
    db = Users()
    user = User()
    user.chat_id = message.chat.id
    user.status = 1
    user.username = message.from_user.username
    if db.users.get(user.chat_id):
        logger.info(f"update exists user: {user.username} {user.chat_id}")
    else:
        logger.info(f"add new user: {user.username} {user.chat_id}")
    db.users[user.chat_id] = user
    db.save()

    loading_widget(message.chat.id, "–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è.\n–°–∫–∞–∂–∏ –º–Ω–µ —Å–≤–æ–∏ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è.")


def loading_widget(chat_id, next_message):
    message_to_edit = bot.send_message(chat_id=chat_id,
                                       text=f"–û–±—Ä–∞–±–æ—Ç–∫–∞ 0%\n{'‚ñí' * 10}")
    time.sleep(0.25)
    for i in [1, 5, 9]:
        bot.edit_message_text(chat_id=chat_id,
                              message_id=message_to_edit.message_id,
                              text=f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {i * 10}%\n{'‚ñà' * i}{'‚ñí' * (10 - i)}")
        time.sleep(0.25)
    bot.edit_message_text(chat_id=chat_id,
                          message_id=message_to_edit.message_id,
                          text=next_message)


def get_users_card(chat_id):
    db = Users()
    users_info = db.users.get(chat_id)
    if users_info:
        if users_info.team:
            start = "–û—Ç–ª–∏—á–Ω–æ!\n"
            end = f"\n–¢—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã {users_info.team}."
        else:
            start = "–ü–æ–º–Ω–∏, —á—Ç–æ —É —Ç–µ–±—è –µ—â—ë –µ—Å—Ç—å –≤—Ä–µ–º—è –Ω–∞–π—Ç–∏ —Å–µ–±–µ –∫–æ–≥–æ-—Ç–æ –≤ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –æ–¥–Ω–æ–π –∏–∑ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö.\n"
            end = "\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É —Ç–µ–±—è –Ω–µ—Ç –∫–æ–º–∞–Ω–¥—ã."
        message = f"–ê —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π —Å–≤–µ—Ä–∏–º —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–π –µ—â—ë —Ä–∞–∑:\n–¢–µ–±—è –∑–æ–≤—É—Ç {users_info.name}.\n–¢—ã —É—á–∏—à—å—Å—è –≤ –≥—Ä—É–ø–ø–µ {users_info.group}."
        return start + message + end


@bot.message_handler(func=lambda message: True)
def echo_all(message):
    db = Users()

    chat_id = str(message.chat.id)
    text = message.text
    if chat_id in db.users:
        if db.users[chat_id].status == 1:
            db.users[chat_id].name = text
            db.users[chat_id].status += 1
            db.save()
            logger.info(f"{chat_id}:{db.users[chat_id].username} add name: {text}")
            bot.send_message(chat_id=message.chat.id, text='–ê –º–µ–Ω—è –∑–æ–≤—É—Ç –ü–æ—Ç–∏. –¢—ã –µ—â—ë —É–∑–Ω–∞–µ—à—å –æ–±–æ –º–Ω–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ '
                                                           'üòâ\n–ú–Ω–µ –ª—é–±–æ–ø—ã—Ç–Ω–æ —É–∑–Ω–∞—Ç—å: –∏–∑ –∫–∞–∫–æ–π —Ç—ã –≥—Ä—É–ø–ø—ã?')


        elif db.users[chat_id].status == 2:
            db.users[chat_id].set_group(text)
            db.users[chat_id].status += 1
            db.save()
            logger.info(f"{chat_id}:{db.users[chat_id].username} add group: {text}")
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True).row(types.KeyboardButton('–î–∞'),
                                                                         types.KeyboardButton('–ù–µ—Ç'))
            bot.send_message(chat_id=message.chat.id, reply_markup=markup, text="–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –∫–æ–º–∞–Ω–¥–∞?")

        elif db.users[chat_id].status == 3:
            if text.lower() == "–¥–∞":
                db.users[chat_id].status += 1
                bot.send_message(chat_id=message.chat.id,
                                 text="–ê –∫–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è?",
                                 reply_markup=types.ReplyKeyboardRemove(selective=False))
                db.save()
            elif text.lower() == "–Ω–µ—Ç":
                db.users[chat_id].status = 5
                db.users[chat_id].team = ''
                db.save()
                logger.info(f"{chat_id}:{db.users[chat_id].username} save empty team")
                loading_widget(chat_id, get_users_card(chat_id))

                markup = types.ReplyKeyboardMarkup(resize_keyboard=True).row(types.KeyboardButton('–î–∞'),
                                                                             types.KeyboardButton('–ù–µ—Ç'))
                bot.send_message(chat_id=message.chat.id, reply_markup=markup, text='–í—Å—ë –≤–µ—Ä–Ω–æ?')
            else:
                bot.send_message(chat_id=message.chat.id, text='–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –±–∏–Ω–∞—Ä–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã "–î–∞" –∏–ª–∏ "–ù–µ—Ç"')
        elif db.users[chat_id].status == 4:
            db.users[chat_id].team = text
            db.users[chat_id].status += 1
            db.save()
            logger.info(f"{chat_id}:{db.users[chat_id].username} add team: {text}")
            loading_widget(chat_id, get_users_card(chat_id))
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True).row(types.KeyboardButton('–î–∞'),
                                                                         types.KeyboardButton('–ù–µ—Ç'))
            bot.send_message(chat_id=message.chat.id, reply_markup=markup, text='–í—Å—ë –≤–µ—Ä–Ω–æ?')

        elif db.users[chat_id].status == 5:
            if text.lower() == "–¥–∞":
                db.users[chat_id].status = 10
                text = "–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ —è –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–≤–æ—é –∑–∞—è–≤–∫—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π." \
                       "–ê —Ç—ã –≤ —ç—Ç–æ–º –≤—Ä–µ–º—è –º–æ–∂–µ—à—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É —á–∞—Ç—É <>,"
                if not db.users[chat_id].team:
                    text += "–≥–¥–µ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Å–µ–±–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏. –£–¥–∞—á–∏!"
                else:
                    text += "–≥–¥–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–±–æ–ª—Ç–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏. –£–¥–∞—á–∏!"
                logger.info(f"{chat_id}:{db.users[chat_id].username} finish registration")
                bot.send_message(chat_id=message.chat.id,
                                 text=text,
                                 reply_markup=types.ReplyKeyboardRemove(selective=False))
                db.save()
            elif text.lower() == "–Ω–µ—Ç":
                db.users[chat_id].status = 1
                logger.info(f"{chat_id}:{db.users[chat_id].username} restart registration")
                bot.send_message(chat_id=message.chat.id,
                                 text="–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑.\n\n–°–∫–∞–∂–∏ –º–Ω–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è.",
                                 reply_markup=types.ReplyKeyboardRemove(selective=False))
                db.save()
            else:
                logger.warning(f"{chat_id}:{db.users[chat_id].username} unsupported answer: {text}")
                bot.send_message(chat_id=message.chat.id, text='–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –±–∏–Ω–∞—Ä–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã "–î–∞" –∏–ª–∏ "–ù–µ—Ç"')
        else:
            logger.warning(f"{chat_id}:{db.users[chat_id].username} receive: {text}")


if __name__ == '__main__':
    logger.info("start bot")
    bot.infinity_polling()
